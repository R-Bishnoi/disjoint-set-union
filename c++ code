// disjoint set union
#include<bits/stdc++.h>
using namespace std;

// this func give us parent of a node like 1->2->6->3  it means find_par(1)=3
int find_par(int node,vector<int>&par){
    if(par[node]==node)return node;
    
    else
        return par[node]=find_par(par[node],par);
    
                      }


//this func union two disjoint set 
void make_union(int u,int v,vector<int>&rank,vector<int>&par){
    u=find_par(u,par);
    v=find_par(v,par);
    
    
 if(rank[u]>rank[v])
    par[v]=u;

 else if(rank[u]<rank[v])
         par[u]=v;

 else{
     par[u]=v;
     rank[v]=rank[v]+1;
     }  
     
}



int main(){
    
    
  int n,e;
  cin>>n>>e;
  
  vector<int>par(n);
  vector<int>rank(n,0);
  
  for(int i=1;i<=n;i++)
    par[i]=i;

           
    
    
  for(int i=1;i<=e;i++){
      int u,v;
      cin>>u>>v;
      make_union(u,v,rank,par);
             }
                      
                      
  // this is printing parent function of node so if question asked about that p and q are 
  //belongig to same set or not then we simpley checking the parent of both p and q 
  //if they are same then they are belongig to same set otherwise the are in disjoint set
  
  for(int i=1;i<=e;i++)
      cout<<i<<"   -->  "<<par[i]<<endl;
  
    
    return 0;
}
